Traceback (most recent call last):
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/corrin/miniconda3/envs/book/lib/python3.8/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# without piping
ChickWeight_last_day <- filter(ChickWeight, Time == 21)
ChickWeight_last_day <- group_by(ChickWeight_last_day, Diet)
summarize(ChickWeight_last_day, Count = n(), Avg_Weight = mean(weight))
------------------

Error: Problem with `summarise()` column `Avg_Weight`.
[34mâ„¹[39m `Avg_Weight = mean(weight)`.
[31mâœ–[39m object 'weight' not found
[34mâ„¹[39m The error occurred in group 1: Diet = 1.
Traceback:

1. summarize(ChickWeight_last_day, Count = n(), Avg_Weight = mean(weight))
2. summarise.grouped_df(ChickWeight_last_day, Count = n(), Avg_Weight = mean(weight))
3. summarise_cols(.data, ..., caller_env = caller_env())
4. withCallingHandlers({
 .     for (i in seq_along(dots)) {
 .         mask$across_cache_reset()
 .         context_poke("column", old_current_column)
 .         quosures <- expand_across(dots[[i]])
 .         quosures_results <- vector(mode = "list", length = length(quosures))
 .         for (k in seq_along(quosures)) {
 .             quo <- quosures[[k]]
 .             quo_data <- attr(quo, "dplyr:::data")
 .             if (!is.null(quo_data$column)) {
 .                 context_poke("column", quo_data$column)
 .             }
 .             chunks_k <- mask$eval_all_summarise(quo)
 .             if (is.null(chunks_k)) {
 .                 next
 .             }
 .             types_k <- withCallingHandlers(vec_ptype_common(!!!chunks_k), 
 .                 vctrs_error_incompatible_type = function(cnd) {
 .                   abort(class = "dplyr:::error_summarise_incompatible_combine", 
 .                     parent = cnd)
 .                 })
 .             chunks_k <- vec_cast_common(!!!chunks_k, .to = types_k)
 .             quosures_results[[k]] <- list(chunks = chunks_k, 
 .                 types = types_k)
 .         }
 .         for (k in seq_along(quosures)) {
 .             quo <- quosures[[k]]
 .             quo_data <- attr(quo, "dplyr:::data")
 .             quo_result <- quosures_results[[k]]
 .             if (is.null(quo_result)) {
 .                 next
 .             }
 .             types_k <- quo_result$types
 .             chunks_k <- quo_result$chunks
 .             if (!quo_data$is_named && is.data.frame(types_k)) {
 .                 chunks_extracted <- .Call(dplyr_extract_chunks, 
 .                   chunks_k, types_k)
 .                 walk2(chunks_extracted, names(types_k), function(chunks_k_j, 
 .                   nm) {
 .                   mask$add_one(nm, chunks_k_j)
 .                 })
 .                 chunks <- append(chunks, chunks_extracted)
 .                 types <- append(types, as.list(types_k))
 .                 out_names <- c(out_names, names(types_k))
 .             }
 .             else {
 .                 name <- quo_data$name_auto
 .                 mask$add_one(name, chunks_k)
 .                 chunks <- append(chunks, list(chunks_k))
 .                 types <- append(types, list(types_k))
 .                 out_names <- c(out_names, name)
 .             }
 .         }
 .     }
 .     recycle_info <- .Call(dplyr_summarise_recycle_chunks, chunks, 
 .         mask$get_rows(), types)
 .     chunks <- recycle_info$chunks
 .     sizes <- recycle_info$sizes
 .     for (i in seq_along(chunks)) {
 .         result <- vec_c(!!!chunks[[i]], .ptype = types[[i]])
 .         cols[[out_names[i]]] <- result
 .     }
 . }, error = function(e) {
 .     local_call_step(dots = dots, .index = i, .fn = "summarise", 
 .         .dot_data = inherits(e, "rlang_error_data_pronoun_not_found"))
 .     call_step <- peek_call_step()
 .     error_name <- call_step$error_name
 .     show_group_details <- TRUE
 .     if (inherits(e, "dplyr:::error_summarise_incompatible_combine")) {
 .         show_group_details <- FALSE
 .         bullets <- c(x = glue("`{error_name}` must return compatible vectors across groups", 
 .             .envir = peek_call_step()), i = cnd_bullet_combine_details(e$parent$x, 
 .             e$parent$x_arg), i = cnd_bullet_combine_details(e$parent$y, 
 .             e$parent$y_arg))
 .     }
 .     else if (inherits(e, "dplyr:::summarise_unsupported_type")) {
 .         bullets <- c(x = glue("`{error_name}` must be a vector, not {friendly_type_of(result)}.", 
 .             result = e$result), i = cnd_bullet_rowwise_unlist())
 .     }
 .     else if (inherits(e, "dplyr:::summarise_incompatible_size")) {
 .         peek_mask()$set_current_group(e$group)
 .         bullets <- c(x = glue("`{error_name}` must be size {or_1(expected_size)}, not {size}.", 
 .             expected_size = e$expected_size, size = e$size), 
 .             i = glue("An earlier column had size {expected_size}.", 
 .                 expected_size = e$expected_size))
 .     }
 .     else if (inherits(e, "dplyr:::summarise_mixed_null")) {
 .         show_group_details <- FALSE
 .         bullets <- c(x = glue("`{error_name}` must return compatible vectors across groups."), 
 .             i = "Cannot combine NULL and non NULL results.")
 .     }
 .     else {
 .         bullets <- c(x = conditionMessage(e))
 .     }
 .     bullets <- c(cnd_bullet_header(), i = cnd_bullet_column_info(), 
 .         bullets, i = if (show_group_details) cnd_bullet_cur_group_label())
 .     abort(bullets, class = "dplyr_error")
 . })
5. mask$eval_all_summarise(quo)
6. mean(weight)
7. .handleSimpleError(function (e) 
 . {
 .     local_call_step(dots = dots, .index = i, .fn = "summarise", 
 .         .dot_data = inherits(e, "rlang_error_data_pronoun_not_found"))
 .     call_step <- peek_call_step()
 .     error_name <- call_step$error_name
 .     show_group_details <- TRUE
 .     if (inherits(e, "dplyr:::error_summarise_incompatible_combine")) {
 .         show_group_details <- FALSE
 .         bullets <- c(x = glue("`{error_name}` must return compatible vectors across groups", 
 .             .envir = peek_call_step()), i = cnd_bullet_combine_details(e$parent$x, 
 .             e$parent$x_arg), i = cnd_bullet_combine_details(e$parent$y, 
 .             e$parent$y_arg))
 .     }
 .     else if (inherits(e, "dplyr:::summarise_unsupported_type")) {
 .         bullets <- c(x = glue("`{error_name}` must be a vector, not {friendly_type_of(result)}.", 
 .             result = e$result), i = cnd_bullet_rowwise_unlist())
 .     }
 .     else if (inherits(e, "dplyr:::summarise_incompatible_size")) {
 .         peek_mask()$set_current_group(e$group)
 .         bullets <- c(x = glue("`{error_name}` must be size {or_1(expected_size)}, not {size}.", 
 .             expected_size = e$expected_size, size = e$size), 
 .             i = glue("An earlier column had size {expected_size}.", 
 .                 expected_size = e$expected_size))
 .     }
 .     else if (inherits(e, "dplyr:::summarise_mixed_null")) {
 .         show_group_details <- FALSE
 .         bullets <- c(x = glue("`{error_name}` must return compatible vectors across groups."), 
 .             i = "Cannot combine NULL and non NULL results.")
 .     }
 .     else {
 .         bullets <- c(x = conditionMessage(e))
 .     }
 .     bullets <- c(cnd_bullet_header(), i = cnd_bullet_column_info(), 
 .         bullets, i = if (show_group_details) cnd_bullet_cur_group_label())
 .     abort(bullets, class = "dplyr_error")
 . }, "object 'weight' not found", base::quote(mean(weight)))
8. h(simpleError(msg, call))
9. abort(bullets, class = "dplyr_error")
10. signal_abort(cnd)
ERROR: Error: Problem with `summarise()` column `Avg_Weight`.
[34mâ„¹[39m `Avg_Weight = mean(weight)`.
[31mâœ–[39m object 'weight' not found
[34mâ„¹[39m The error occurred in group 1: Diet = 1.


